{
    "Basic Test Case": {
        "prefix": "testcase",
        "body": [
            "testcase: \"$1:Test Case Name\"",
            "description: \"$2:Test case description\"",
            "",
            "steps:",
            "  - name: \"$3:Step name\"",
            "    action: $4:log",
            "    args: [\"$5:Hello World\"]",
            "    $0"
        ],
        "description": "Create a basic test case"
    },
    "Log Action": {
        "prefix": "log",
        "body": [
            "- name: \"$1:Log message\"",
            "  action: log",
            "  args: [\"$2:Message to log\"]"
        ],
        "description": "Add a log action"
    },
    "Sleep Action": {
        "prefix": "sleep",
        "body": [
            "- name: \"$1:Sleep\"",
            "  action: sleep",
            "  args: [$2:2]"
        ],
        "description": "Add a sleep action"
    },
    "Assert Action": {
        "prefix": "assert",
        "body": [
            "- name: \"$1:Assert\"",
            "  action: assert",
            "  args: [\"$2:actual\", \"==\", \"$3:expected\", \"$4:Custom message\"]"
        ],
        "description": "Add an assert action"
    },
    "Get Time Action": {
        "prefix": "get_time",
        "body": [
            "- name: \"$1:Get time\"",
            "  action: get_time",
            "  args: [\"$2:iso\"]",
            "  result: $3:timestamp"
        ],
        "description": "Add a get_time action"
    },
    "Get Random Action": {
        "prefix": "get_random",
        "body": [
            "- name: \"$1:Get random\"",
            "  action: get_random",
            "  args: [$2:100]",
            "  result: $3:random_number"
        ],
        "description": "Add a get_random action"
    },
    "Get Random Range": {
        "prefix": "get_random_range",
        "body": [
            "- name: \"$1:Get random range\"",
            "  action: get_random",
            "  args: [$2:1, $3:10]",
            "  result: $4:random_range"
        ],
        "description": "Add a get_random action with range"
    },
    "HTTP Get Action": {
        "prefix": "http_get",
        "body": [
            "- name: \"$1:HTTP GET\"",
            "  action: http_get",
            "  args: [\"$2:https://api.example.com/data\"]",
            "  result: $3:response"
        ],
        "description": "Add an HTTP GET action"
    },
    "HTTP Post Action": {
        "prefix": "http_post",
        "body": [
            "- name: \"$1:HTTP POST\"",
            "  action: http_post",
            "  args: [\"$2:https://api.example.com/data\", \"$3:{\\\"key\\\": \\\"value\\\"}\"]",
            "  result: $4:response"
        ],
        "description": "Add an HTTP POST action"
    },
    "If Statement - Basic": {
        "prefix": "if",
        "body": [
            "- name: \"$1:If statement\"",
            "  if:",
            "    condition: \"$2:\\${variable} == 'value'\"",
            "    then:",
            "      - name: \"$3:Then step\"",
            "        action: $4:log",
            "        args: [\"$5:Condition is true\"]",
            "    else:",
            "      - name: \"$6:Else step\"",
            "        action: $7:log",
            "        args: [\"$8:Condition is false\"]"
        ],
        "description": "Add a complete if statement with then and else branches"
    },
    "If Statement - Simple": {
        "prefix": "if_simple",
        "body": [
            "- name: \"$1:If statement\"",
            "  if:",
            "    condition: \"$2:true\"",
            "    then:",
            "      - action: $3:log",
            "        args: [\"$4:Condition is true\"]"
        ],
        "description": "Add a simple if statement with only then branch"
    },
    "If Statement - Comparison": {
        "prefix": "if_compare",
        "body": [
            "- name: \"$1:If with comparison\"",
            "  if:",
            "    condition: \"\\${$2:variable} $3:> $4:5\"",
            "    then:",
            "      - action: $5:log",
            "        args: [\"$6:Value is greater than 5\"]",
            "    else:",
            "      - action: $7:log",
            "        args: [\"$8:Value is 5 or less\"]"
        ],
        "description": "Add an if statement with numeric comparison"
    },
    "If Statement - String": {
        "prefix": "if_string",
        "body": [
            "- name: \"$1:If with string\"",
            "  if:",
            "    condition: \"\\${$2:variable} contains '$3:search'\"",
            "    then:",
            "      - action: $4:log",
            "        args: [\"$5:String contains search term\"]",
            "    else:",
            "      - action: $6:log",
            "        args: [\"$7:String does not contain search term\"]"
        ],
        "description": "Add an if statement with string operations"
    },
    "For Loop - Range": {
        "prefix": "for_range",
        "body": [
            "- name: \"$1:For loop with range\"",
            "  for:",
            "    condition: \"$2:1..$3:5\"",
            "    steps:",
            "      - name: \"$4:Loop step\"",
            "        action: $5:log",
            "        args: [\"$6:Iteration \\${iteration}\"]"
        ],
        "description": "Add a for loop with numeric range (1..5)"
    },
    "For Loop - Array": {
        "prefix": "for_array",
        "body": [
            "- name: \"$1:For loop with array\"",
            "  for:",
            "    condition: \"[$2:item1,$3:item2,$4:item3]\"",
            "    steps:",
            "      - name: \"$5:Loop step\"",
            "        action: $6:log",
            "        args: [\"$7:Processing \\${condition} at index \\${index}\"]"
        ],
        "description": "Add a for loop with array of items"
    },
    "For Loop - Count": {
        "prefix": "for_count",
        "body": [
            "- name: \"$1:For loop with count\"",
            "  for:",
            "    condition: \"$2:3\"",
            "    max_iterations: $3:10",
            "    steps:",
            "      - name: \"$4:Loop step\"",
            "        action: $5:log",
            "        args: [\"$6:Count iteration \\${iteration}\"]"
        ],
        "description": "Add a for loop with count and max iterations"
    },
    "While Loop": {
        "prefix": "while",
        "body": [
            "- name: \"$1:While loop\"",
            "  while:",
            "    condition: \"\\${$2:counter} $3:< $4:5\"",
            "    max_iterations: $5:10",
            "    steps:",
            "      - name: \"$6:Loop step\"",
            "        action: $7:log",
            "        args: [\"$8:Iteration \\${iteration}\"]"
        ],
        "description": "Add a while loop with condition and max iterations"
    },
    "Nested If in For": {
        "prefix": "nested_if_for",
        "body": [
            "- name: \"$1:Nested if in for loop\"",
            "  for:",
            "    condition: \"$2:1..$3:3\"",
            "    steps:",
            "      - action: $4:log",
            "        args: [\"$5:Outer loop iteration \\${iteration}\"]",
            "      - if:",
            "          condition: \"\\${iteration} == $6:2\"",
            "          then:",
            "            - action: $7:log",
            "              args: [\"$8:Nested if: iteration is 2\"]",
            "          else:",
            "            - action: $9:log",
            "              args: [\"$10:Nested if: iteration is not 2\"]"
        ],
        "description": "Add a for loop with nested if statement"
    },
    "Nested For in If": {
        "prefix": "nested_for_if",
        "body": [
            "- name: \"$1:Nested for in if\"",
            "  if:",
            "    condition: \"$2:true\"",
            "    then:",
            "      - for:",
            "          condition: \"$3:1..$4:2\"",
            "          steps:",
            "            - action: $5:log",
            "              args: [\"$6:Nested for iteration \\${iteration}\"]",
            "    else:",
            "      - action: $7:log",
            "        args: [\"$8:Condition is false\"]"
        ],
        "description": "Add an if statement with nested for loop"
    },
    "Control Flow with Continue on Failure": {
        "prefix": "control_continue",
        "body": [
            "- name: \"$1:Control flow with continue\"",
            "  for:",
            "    condition: \"$2:1..$3:3\"",
            "    steps:",
            "      - action: $4:log",
            "        args: [\"$5:Processing iteration \\${iteration}\"]",
            "      - action: $6:assert",
            "        args: [\"\\${iteration}\", \"!=\", \"$7:2\", \"Should not be 2\"]",
            "        continue_on_failure: $8:true"
        ],
        "description": "Add control flow with continue_on_failure"
    },
    "Variables Section": {
        "prefix": "variables",
        "body": [
            "variables:",
            "  vars:",
            "    $1:variable_name: \"$2:value\"",
            "  secrets:",
            "    $3:secret_name:",
            "      file: \"$4:path/to/secret.txt\"",
            "      mask_output: $5:true"
        ],
        "description": "Add variables section with vars and secrets"
    },
    "Retry Configuration": {
        "prefix": "retry",
        "body": [
            "retry:",
            "  attempts: $1:3",
            "  delay: $2:1s",
            "  backoff: \"$3:exponential\"",
            "  max_delay: $4:10s",
            "  jitter: $5:true"
        ],
        "description": "Add retry configuration with all options"
    },
    "Continue on Failure": {
        "prefix": "continue_on_failure",
        "body": [
            "continue_on_failure: $1:true"
        ],
        "description": "Add continue_on_failure flag"
    },
    "Verbose Output": {
        "prefix": "verbose",
        "body": [
            "verbose: $1:true"
        ],
        "description": "Add verbose output flag"
    },
    "Variable Action - Set": {
        "prefix": "variable_set",
        "body": [
            "- name: \"$1:Set variable\"",
            "  action: variable",
            "  args: [\"set\", \"$2:var_name\", \"$3:value\"]",
            "  result: $4:set_result"
        ],
        "description": "Add a variable set action"
    },
    "Variable Action - Get": {
        "prefix": "variable_get",
        "body": [
            "- name: \"$1:Get variable\"",
            "  action: variable",
            "  args: [\"get\", \"$2:var_name\"]",
            "  result: $3:get_result"
        ],
        "description": "Add a variable get action"
    },
    "Variable Action - List": {
        "prefix": "variable_list",
        "body": [
            "- name: \"$1:List variables\"",
            "  action: variable",
            "  args: [\"list\"]",
            "  result: $2:list_result"
        ],
        "description": "Add a variable list action"
    },
    "TDM Action - Generate": {
        "prefix": "tdm_generate",
        "body": [
            "- name: \"$1:Generate test data\"",
            "  action: tdm",
            "  args: [\"generate\", \"$2:user_{index}\", $3:5]",
            "  result: $4:generated_data"
        ],
        "description": "Add a TDM generate action"
    },
    "TDM Action - Validate": {
        "prefix": "tdm_validate",
        "body": [
            "- name: \"$1:Validate data\"",
            "  action: tdm",
            "  args: [\"validate\", \"$2:validation_rule\"]",
            "  result: $3:validation_result"
        ],
        "description": "Add a TDM validate action"
    },
    "TDM Action - Load Dataset": {
        "prefix": "tdm_load",
        "body": [
            "- name: \"$1:Load dataset\"",
            "  action: tdm",
            "  args: [\"load_dataset\", \"$2:dataset_name\"]",
            "  result: $3:load_result"
        ],
        "description": "Add a TDM load dataset action"
    },
    "TDM Action - Set Environment": {
        "prefix": "tdm_env",
        "body": [
            "- name: \"$1:Set environment\"",
            "  action: tdm",
            "  args: [\"set_environment\", \"$2:environment_name\"]",
            "  result: $3:env_result"
        ],
        "description": "Add a TDM set environment action"
    },
    "Control Action - If": {
        "prefix": "control_if",
        "body": [
            "- name: \"$1:Control if\"",
            "  action: control",
            "  args: [\"if\", \"\\${$2:variable} $3:> $4:5\"]",
            "  result: $5:condition_result"
        ],
        "description": "Add a control if action"
    },
    "Control Action - For": {
        "prefix": "control_for",
        "body": [
            "- name: \"$1:Control for\"",
            "  action: control",
            "  args: [\"for\", \"$2:1..5\"]",
            "  result: $3:loop_result"
        ],
        "description": "Add a control for action"
    },
    "Control Action - While": {
        "prefix": "control_while",
        "body": [
            "- name: \"$1:Control while\"",
            "  action: control",
            "  args: [\"while\", \"\\${$2:counter} $3:< $4:10\"]",
            "  result: $5:while_result"
        ],
        "description": "Add a control while action"
    },
    "HTTP with mTLS": {
        "prefix": "http_mtls",
        "body": [
            "- name: \"$1:HTTP with mTLS\"",
            "  action: http",
            "  args: [\"$2:GET\", \"$3:https://secure.example.com/api\", \"$4:{\\\"cert\\\": \\\"client.crt\\\", \\\"key\\\": \\\"client.key\\\", \\\"ca\\\": \\\"ca.crt\\\"}\"]",
            "  result: $5:secure_response"
        ],
        "description": "Add an HTTP request with mTLS certificates"
    },
    "HTTP with Custom Headers": {
        "prefix": "http_headers",
        "body": [
            "- name: \"$1:HTTP with headers\"",
            "  action: http",
            "  args: [\"$2:POST\", \"$3:https://api.example.com/data\", \"$4:{\\\"key\\\": \\\"value\\\"}\", \"$5:{\\\"Content-Type\\\": \\\"application/json\\\", \\\"Authorization\\\": \\\"Bearer ...\\\"}\"]",
            "  result: $6:response"
        ],
        "description": "Add an HTTP request with custom headers"
    },
    "SWIFT Message Template": {
        "prefix": "swift_template",
        "body": [
            "- name: \"$1:Generate SWIFT message\"",
            "  action: concat",
            "  args: [",
            "    \"{1:F01\", \"\\${$2:bank_bic}\", \"XXXX\", \"U\", \"3003\", \"1234567890\", \"}\",",
            "    \"{2:I103\", \"\\${$2:bank_bic}\", \"XXXX\", \"U}\",",
            "    \"{3:{113:SEPA}\",",
            "    \"{108:\\${$3:transaction_id}}\",",
            "    \"{111:001}\",",
            "    \"{121:}\",",
            "    \"{4:\",",
            "    \":20:\\${$3:transaction_id}\",",
            "    \":23B:CRED\",",
            "    \":32A:\\${$4:value_date}\", \"\\${$5:currency}\", \"\\${$6:amount}\",",
            "    \":50K:/\\${$7:ordering_customer}\",",
            "    \":59:/\\${$8:beneficiary}\",",
            "    \":71A:SHA\",",
            "    \":72:/ACC/\\${$9:account_info}\",",
            "    \"-}\",",
            "    \"{5:{MAC:}\",",
            "    \"{CHK:}\",",
            "    \"{TNG:}\",",
            "    \"-}\",",
            "    \"{S:{COP:S}}\",",
            "    \"-}\"",
            "  ]",
            "  result: $10:swift_message"
        ],
        "description": "Add a SWIFT MT103 message template"
    },
    "TDM Data Management Block": {
        "prefix": "tdm_block",
        "body": [
            "data_management:",
            "  environment: \"$1:development\"",
            "  isolation: $2:true",
            "  cleanup: $3:true",
            "  data_sets:",
            "    - name: \"$4:test_users\"",
            "      description: \"$5:Test user data\"",
            "      version: \"$6:1.0\"",
            "      data:",
            "        user1:",
            "          name: \"$7:John Doe\"",
            "          email: \"$8:john@example.com\"",
            "          age: $9:30",
            "        user2:",
            "          name: \"$10:Jane Smith\"",
            "          email: \"$11:jane@example.com\"",
            "          age: $12:25",
            "      schema:",
            "        name: \"string\"",
            "        email: \"email\"",
            "        age: \"number\"",
            "      required: [\"name\", \"email\"]",
            "      unique: [\"email\"]",
            "  validation:",
            "    - name: \"$13:email_validation\"",
            "      type: \"format\"",
            "      field: \"$4:test_users.user1.email\"",
            "      rule: \"email\"",
            "      message: \"$14:User email must be valid\"",
            "      severity: \"error\"",
            "  setup:",
            "    - name: \"$15:TDM Setup\"",
            "      action: log",
            "      args: [\"$16:Setting up test environment\"]",
            "  teardown:",
            "    - name: \"$17:TDM Cleanup\"",
            "      action: log",
            "      args: [\"$18:Cleaning up test environment\"]"
        ],
        "description": "Add a complete TDM data management block"
    },
    "Environment Configuration": {
        "prefix": "environment",
        "body": [
            "environments:",
            "  - name: \"$1:development\"",
            "    description: \"$2:Development environment\"",
            "    variables:",
            "      api_base_url: \"$3:https://dev-api.example.com\"",
            "      timeout: $4:30",
            "    overrides:",
            "      debug_mode: $5:true",
            "    secrets:",
            "      api_key:",
            "        file: \"$6:secret.txt\"",
            "        mask_output: $7:true"
        ],
        "description": "Add environment configuration"
    },
    "Variables with Secrets": {
        "prefix": "variables_secrets",
        "body": [
            "variables:",
            "  vars:",
            "    base_url: \"$1:https://api.example.com\"",
            "    timeout: $2:30",
            "    retry_count: $3:3",
            "  secrets:",
            "    api_key:",
            "      value: \"$4:your-api-key-here\"",
            "      mask_output: $5:true",
            "    database_password:",
            "      file: \"$6:db-password.txt\"",
            "      mask_output: $7:true"
        ],
        "description": "Add variables section with secrets"
    },
    "Retry Configuration": {
        "prefix": "retry",
        "body": [
            "retry:",
            "  attempts: $1:3",
            "  delay: $2:1s",
            "  backoff: \"$3:exponential\"",
            "  conditions: [\"$4:5xx\", \"$5:timeout\"]",
            "  max_delay: $6:10s",
            "  jitter: $7:true"
        ],
        "description": "Add retry configuration for a step"
    },
    "PostgreSQL with Connection": {
        "prefix": "postgres_connect",
        "body": [
            "- name: \"$1:Connect to database\"",
            "  action: postgres",
            "  args: [\"connect\", \"$2:postgres://user:pass@localhost/db\"]",
            "  result: $3:db_connection",
            "",
            "- name: \"$4:Execute query\"",
            "  action: postgres",
            "  args: [\"query\", \"$3:db_connection\", \"$5:SELECT * FROM users WHERE id = $1\", [\"$6:user_id\"]]",
            "  result: $7:query_result",
            "",
            "- name: \"$8:Close connection\"",
            "  action: postgres",
            "  args: [\"close\", \"$3:db_connection\"]"
        ],
        "description": "Add PostgreSQL operations with connection management"
    },
    "Assert with Multiple Conditions": {
        "prefix": "assert_multi",
        "body": [
            "- name: \"$1:Assert multiple conditions\"",
            "  action: assert",
            "  args: [\"\\${$2:response.status_code}\", \"==\", \"$3:200\", \"$4:Status should be 200\"]",
            "",
            "- name: \"$5:Assert response contains\"",
            "  action: assert",
            "  args: [\"\\${$6:response.body}\", \"contains\", \"$7:success\", \"$8:Response should contain success\"]",
            "",
            "- name: \"$9:Assert numeric range\"",
            "  action: assert",
            "  args: [\"\\${$10:count}\", \">=\", \"$11:1\", \"$12:Count should be at least 1\"]"
        ],
        "description": "Add multiple assertion steps"
    },
    "Time Operations": {
        "prefix": "time_ops",
        "body": [
            "- name: \"$1:Get ISO timestamp\"",
            "  action: get_time",
            "  args: [\"iso\"]",
            "  result: $2:iso_time",
            "",
            "- name: \"$3:Get Unix timestamp\"",
            "  action: get_time",
            "  args: [\"unix\"]",
            "  result: $4:unix_time",
            "",
            "- name: \"$5:Get custom format\"",
            "  action: get_time",
            "  args: [\"$6:2006-01-02 15:04:05\"]",
            "  result: $7:custom_time"
        ],
        "description": "Add various time operations"
    },
    "Random Data Generation": {
        "prefix": "random_data",
        "body": [
            "- name: \"$1:Generate random integer\"",
            "  action: get_random",
            "  args: [$2:1, $3:100]",
            "  result: $4:random_int",
            "",
            "- name: \"$5:Generate random decimal\"",
            "  action: get_random",
            "  args: [$6:0.1, $7:1.0]",
            "  result: $8:random_decimal",
            "",
            "- name: \"$9:Generate random ID\"",
            "  action: concat",
            "  args: [\"ID_\", \"\\${$4:random_int}\", \"_\", \"\\${$8:random_decimal}\"]",
            "  result: $10:random_id"
        ],
        "description": "Add random data generation steps"
    },
    "HTTP Batch Request": {
        "prefix": "http_batch",
        "body": [
            "- name: \"$1:HTTP Batch Request\"",
            "  action: http_batch",
            "  args: [",
            "    {",
            "      \"requests\": [",
            "        {",
            "          \"method\": \"$2:GET\",",
            "          \"url\": \"$3:https://api1.example.com/data\"",
            "        },",
            "        {",
            "          \"method\": \"$4:GET\",",
            "          \"url\": \"$5:https://api2.example.com/data\"",
            "        }",
            "      ],",
            "      \"concurrency\": $6:3",
            "    }",
            "  ]",
            "  result: $7:batch_response"
        ],
        "description": "Add HTTP batch request with parallel execution"
    },
    "PostgreSQL Batch Operations": {
        "prefix": "postgres_batch",
        "body": [
            "- name: \"$1:PostgreSQL Batch Operations\"",
            "  action: postgres",
            "  args: [",
            "    \"batch\",",
            "    \"$2:postgres://user:pass@localhost/db\",",
            "    [",
            "      {",
            "        \"query\": \"$3:SELECT * FROM users\"",
            "      },",
            "      {",
            "        \"query\": \"$4:SELECT * FROM orders\"",
            "      }",
            "    ],",
            "    {",
            "      \"concurrency\": $5:5",
            "    }",
            "  ]",
            "  result: $6:batch_results"
        ],
        "description": "Add PostgreSQL batch operations with parallel execution"
    },
    "Parallel Execution Configuration": {
        "prefix": "parallel",
        "body": [
            "parallel:",
            "  enabled: $1:true",
            "  steps: $2:true",
            "  concurrency: $3:4",
            "  timeout: \"$4:30s\""
        ],
        "description": "Add parallel execution configuration"
    },
    "Advanced Test Case with Parallel": {
        "prefix": "testcase_parallel",
        "body": [
            "testcase: \"$1:Advanced Test Case\"",
            "description: \"$2:Test case with parallel execution and TDM\"",
            "",
            "variables:",
            "  vars:",
            "    base_url: \"$3:https://api.example.com\"",
            "  secrets:",
            "    api_key:",
            "      file: \"$4:secret.txt\"",
            "      mask_output: true",
            "",
            "data_management:",
            "  environment: \"$5:development\"",
            "  isolation: true",
            "  cleanup: true",
            "  data_sets:",
            "    - name: \"$6:test_data\"",
            "      data:",
            "        user1:",
            "          name: \"$7:John Doe\"",
            "          email: \"$8:john@example.com\"",
            "",
            "parallel:",
            "  enabled: true",
            "  steps: true,"  concurrency: $9: 4""","steps:",
            "  - name: \"$10:Get timestamp\"",
            "    action: get_time",
            "    args: [\"iso\"]",
            "    result: timestamp",
            "",
            "  - name: \"$11:Log start\"",
            "    action: log",
            "    args: [\"Test started at: \\${timestamp}\"]",
            "",
            "  - name: \"$12:API request\"",
            "    action: http_get",
            "    args: [\"\\${base_url}/users\"]",
            "    result: response",
            "",
            "  - name: \"$13:Assert response\"",
            "    action: assert",
            "    args: [\"\\${response.status_code}\", \"==\", \"200\", \"API should return 200\"]",
            "",
            "  - name: \"$14:Log completion\"",
            "    action: log",
            "    args: [\"Test completed successfully\"]"
        ],
        "description": "Create an advanced test case with parallel execution and TDM"
    },
    "SWIFT MT103 Message": {
        "prefix": "swift_mt103",
        "body": [
            "- name: \"$1:Generate SWIFT MT103\"",
            "  action: concat",
            "  args: [",
            "    \"{1:F01\", \"\\${$2:bank_bic}\", \"XXXX\", \"U\", \"3003\", \"\\${$3:session_number}\", \"}\",",
            "    \"{2:I103\", \"\\${$2:bank_bic}\", \"XXXX\", \"U}\",",
            "    \"{3:{113:SEPA}\",",
            "    \"{108:\\${$4:transaction_id}}\",",
            "    \"{111:001}\",",
            "    \"{121:}\",",
            "    \"{4:\",",
            "    \":20:\\${$4:transaction_id}\",",
            "    \":23B:CRED\",",
            "    \":32A:\\${$5:value_date}\", \"\\${$6:currency}\", \"\\${$7:amount}\",",
            "    \":50K:/\\${$8:ordering_customer}\",",
            "    \":59:/\\${$9:beneficiary}\",",
            "    \":71A:SHA\",",
            "    \":72:/ACC/\\${$10:account_info}\",",
            "    \"-}\",",
            "    \"{5:{MAC:}\",",
            "    \"{CHK:}\",",
            "    \"{TNG:}\",",
            "    \"-}\",",
            "    \"{S:{COP:S}}\",",
            "    \"-}\"",
            "  ]",
            "  result: $11:swift_message"
        ],
        "description": "Generate a complete SWIFT MT103 message"
    },
    "Verbose Logging": {
        "prefix": "verbose_log",
        "body": [
            "- name: \"$1:Verbose logging\"",
            "  action: log",
            "  args: [\"$2:Detailed message with variables: \\${$3:variable}\"]",
            "  verbose: \"$4:detailed\""
        ],
        "description": "Add verbose logging with detailed output"
    },
    "Database Transaction": {
        "prefix": "db_transaction",
        "body": [
            "- name: \"$1:Start transaction\"",
            "  action: postgres",
            "  args: [\"begin\", \"$2:postgres://user:pass@localhost/db\"]",
            "  result: $3:tx",
            "",
            "- name: \"$4:Execute query\"",
            "  action: postgres",
            "  args: [\"execute\", \"$3:tx\", \"$5:INSERT INTO users (name, email) VALUES ($1, $2)\", [\"$6:John Doe\", \"$7:john@example.com\"]]",
            "  result: $8:insert_result",
            "",
            "- name: \"$9:Commit transaction\"",
            "  action: postgres",
            "  args: [\"commit\", \"$3:tx\"]"
        ],
        "description": "Add database transaction with begin, execute, and commit"
    },
    "Kafka Message": {
        "prefix": "kafka",
        "body": [
            "- name: \"$1:Kafka Message\"",
            "  action: kafka",
            "  args: [\"$2:publish\", \"$3:localhost:9092\", \"$4:test-topic\", \'$5:{\\\"key\\\": \\\"value\\\"}\']",
            "  result: $6:publish_result"
        ],
        "description": "Add Kafka message publishing"
    },
    "RabbitMQ Message": {
        "prefix": "rabbitmq",
        "body": [
            "- name: \"$1:RabbitMQ Message\"",
            "  action: rabbitmq",
            "  args: [\"$2:publish\", \"$3:amqp://localhost\", \"$4:test-exchange\", \"$5:test-routing-key\", \'$6:{\\\"key\\\": \\\"value\\\"}\']",
            "  result: $7:publish_result"
        ],
        "description": "Add RabbitMQ message publishing"
    },
    "Spanner Query": {
        "prefix": "spanner",
        "body": [
            "- name: \"$1:Spanner Query\"",
            "  action: spanner",
            "  args: [\"$2:query\", \"$3:projects/my-project/instances/my-instance/databases/my-db\", \"$4:SELECT * FROM users\"]",
            "  result: $5:query_result"
        ],
        "description": "Add Google Cloud Spanner query"
    },
    "Template Generation": {
        "prefix": "template",
        "body": [
            "- name: \"$1:Generate Template\"",
            "  action: template",
            "  args: [\"$2:templates/mt103.tmpl\", {\"$3:amount\": \"$4:1000.00\", \"$5:currency\": \"$6:EUR\"}]",
            "  result: $7:generated_content"
        ],
        "description": "Generate content from template with variables"
    },
    "Skip Step": {
        "prefix": "skip",
        "body": [
            "- name: \"$1:Skip Step\"",
            "  action: skip",
            "  args: [\"$2:This step is not needed in current environment\"]"
        ],
        "description": "Skip the current step with a reason"
    },
    "String Operations": {
        "prefix": "string_ops",
        "body": [
            "- name: \"$1:Convert to uppercase\"",
            "  action: string",
            "  args: [\"$2:upper\", \"$3:hello world\"]",
            "  result: $4:uppercase_string",
            "",
            "- name: \"$5:Replace text\"",
            "  action: string",
            "  args: [\"$6:replace\", \"$4:uppercase_string\", \"$7:WORLD\", \"$8:ROBOGO\"]",
            "  result: $9:replaced_string"
        ],
        "description": "Add string manipulation operations"
    },
    "Time Operations": {
        "prefix": "time_ops",
        "body": [
            "- name: \"$1:Add time\"",
            "  action: time",
            "  args: [\"$2:add\", \"$3:2024-01-01\", \"$4:24h\"]",
            "  result: $5:future_date",
            "",
            "- name: \"$6:Format time\"",
            "  action: time",
            "  args: [\"$7:format\", \"$5:future_date\", \"$8:2006-01-02\"]",
            "  result: $9:formatted_date"
        ],
        "description": "Add time manipulation operations"
    },
    "Test Suite": {
        "prefix": "testsuite",
        "body": [
            "testsuite: \"$1:Test Suite Name\"",
            "description: \"$2:Description of the test suite\"",
            "parallel: $3:false",
            "options:",
            "  max_concurrency: $4:3",
            "",
            "variables:",
            "  regular:",
            "    api_url: \"$5:https://api.example.com\"",
            "    default_user: \"$6:suiteuser\"",
            "  secrets:",
            "    api_key:",
            "      file: \"$7:secret.txt\"",
            "      mask_output: true",
            "",
            "setup:",
            "  - name: \"$8:Suite Setup\"",
            "    action: log",
            "    args: [\"$9:Setting up the test suite\"]",
            "",
            "testcases:",
            "  - file: $10:test1.robogo",
            "  - file: $11:test2.robogo",
            "",
            "teardown:",
            "  - name: \"$12:Suite Teardown\"",
            "    action: log",
            "    args: [\"$13:Cleaning up after test suite\"]"
        ],
        "description": "Create a test suite with multiple test cases"
    },
    "Conditional Skip": {
        "prefix": "skip_conditional",
        "body": [
            "- name: \"$1:Conditional Step\"",
            "  action: log",
            "  args: [\"$2:This step runs conditionally\"]",
            "  skip: \"$3:\\${environment} == 'prod'\""
        ],
        "description": "Add a step that skips based on a condition"
    }
}