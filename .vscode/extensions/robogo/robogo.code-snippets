{
    "Basic Test Case": {
        "prefix": "testcase",
        "body": [
            "testcase: \"$1:Test Case Name\"",
            "description: \"$2:Test case description\"",
            "",
            "steps:",
            "  - name: \"$3:Step name\"",
            "    action: $4:log",
            "    args: [\"$5:Hello World\"]",
            "    $0"
        ],
        "description": "Create a basic test case"
    },
    "Log Action": {
        "prefix": "log",
        "body": [
            "- name: \"$1:Log message\"",
            "  action: log",
            "  args: [\"$2:Message to log\"]"
        ],
        "description": "Add a log action"
    },
    "Sleep Action": {
        "prefix": "sleep",
        "body": [
            "- name: \"$1:Sleep\"",
            "  action: sleep",
            "  args: [$2:2]"
        ],
        "description": "Add a sleep action"
    },
    "Assert Action": {
        "prefix": "assert",
        "body": [
            "- name: \"$1:Assert\"",
            "  action: assert",
            "  args: [\"$2:actual\", \"==\", \"$3:expected\", \"$4:Custom message\"]"
        ],
        "description": "Add an assert action"
    },
    "Get Time Action": {
        "prefix": "get_time",
        "body": [
            "- name: \"$1:Get time\"",
            "  action: get_time",
            "  args: [\"$2:iso\"]",
            "  result: $3:timestamp"
        ],
        "description": "Add a get_time action"
    },
    "Get Random Action": {
        "prefix": "get_random",
        "body": [
            "- name: \"$1:Get random\"",
            "  action: get_random",
            "  args: [$2:100]",
            "  result: $3:random_number"
        ],
        "description": "Add a get_random action"
    },
    "Get Random Range": {
        "prefix": "get_random_range",
        "body": [
            "- name: \"$1:Get random range\"",
            "  action: get_random",
            "  args: [$2:1, $3:10]",
            "  result: $4:random_range"
        ],
        "description": "Add a get_random action with range"
    },
    "HTTP Get Action": {
        "prefix": "http_get",
        "body": [
            "- name: \"$1:HTTP GET\"",
            "  action: http_get",
            "  args: [\"$2:https://api.example.com/data\"]",
            "  result: $3:response"
        ],
        "description": "Add an HTTP GET action"
    },
    "HTTP Post Action": {
        "prefix": "http_post",
        "body": [
            "- name: \"$1:HTTP POST\"",
            "  action: http_post",
            "  args: [\"$2:https://api.example.com/data\", \"$3:{\\\"key\\\": \\\"value\\\"}\"]",
            "  result: $4:response"
        ],
        "description": "Add an HTTP POST action"
    },
    "If Statement - Basic": {
        "prefix": "if",
        "body": [
            "- name: \"$1:If statement\"",
            "  if:",
            "    condition: \"$2:\\${variable} == 'value'\"",
            "    then:",
            "      - name: \"$3:Then step\"",
            "        action: $4:log",
            "        args: [\"$5:Condition is true\"]",
            "    else:",
            "      - name: \"$6:Else step\"",
            "        action: $7:log",
            "        args: [\"$8:Condition is false\"]"
        ],
        "description": "Add a complete if statement with then and else branches"
    },
    "If Statement - Simple": {
        "prefix": "if_simple",
        "body": [
            "- name: \"$1:If statement\"",
            "  if:",
            "    condition: \"$2:true\"",
            "    then:",
            "      - action: $3:log",
            "        args: [\"$4:Condition is true\"]"
        ],
        "description": "Add a simple if statement with only then branch"
    },
    "If Statement - Comparison": {
        "prefix": "if_compare",
        "body": [
            "- name: \"$1:If with comparison\"",
            "  if:",
            "    condition: \"\\${$2:variable} $3:> $4:5\"",
            "    then:",
            "      - action: $5:log",
            "        args: [\"$6:Value is greater than 5\"]",
            "    else:",
            "      - action: $7:log",
            "        args: [\"$8:Value is 5 or less\"]"
        ],
        "description": "Add an if statement with numeric comparison"
    },
    "If Statement - String": {
        "prefix": "if_string",
        "body": [
            "- name: \"$1:If with string\"",
            "  if:",
            "    condition: \"\\${$2:variable} contains '$3:search'\"",
            "    then:",
            "      - action: $4:log",
            "        args: [\"$5:String contains search term\"]",
            "    else:",
            "      - action: $6:log",
            "        args: [\"$7:String does not contain search term\"]"
        ],
        "description": "Add an if statement with string operations"
    },
    "For Loop - Range": {
        "prefix": "for_range",
        "body": [
            "- name: \"$1:For loop with range\"",
            "  for:",
            "    condition: \"$2:1..$3:5\"",
            "    steps:",
            "      - name: \"$4:Loop step\"",
            "        action: $5:log",
            "        args: [\"$6:Iteration \\${iteration}\"]"
        ],
        "description": "Add a for loop with numeric range (1..5)"
    },
    "For Loop - Array": {
        "prefix": "for_array",
        "body": [
            "- name: \"$1:For loop with array\"",
            "  for:",
            "    condition: \"[$2:item1,$3:item2,$4:item3]\"",
            "    steps:",
            "      - name: \"$5:Loop step\"",
            "        action: $6:log",
            "        args: [\"$7:Processing \\${condition} at index \\${index}\"]"
        ],
        "description": "Add a for loop with array of items"
    },
    "For Loop - Count": {
        "prefix": "for_count",
        "body": [
            "- name: \"$1:For loop with count\"",
            "  for:",
            "    condition: \"$2:3\"",
            "    max_iterations: $3:10",
            "    steps:",
            "      - name: \"$4:Loop step\"",
            "        action: $5:log",
            "        args: [\"$6:Count iteration \\${iteration}\"]"
        ],
        "description": "Add a for loop with count and max iterations"
    },
    "While Loop": {
        "prefix": "while",
        "body": [
            "- name: \"$1:While loop\"",
            "  while:",
            "    condition: \"\\${$2:counter} $3:< $4:5\"",
            "    max_iterations: $5:10",
            "    steps:",
            "      - name: \"$6:Loop step\"",
            "        action: $7:log",
            "        args: [\"$8:While iteration \\${iteration}\"]"
        ],
        "description": "Add a while loop with condition and max iterations"
    },
    "Nested If in For": {
        "prefix": "nested_if_for",
        "body": [
            "- name: \"$1:Nested if in for loop\"",
            "  for:",
            "    condition: \"$2:1..$3:3\"",
            "    steps:",
            "      - action: $4:log",
            "        args: [\"$5:Outer loop iteration \\${iteration}\"]",
            "      - if:",
            "          condition: \"\\${iteration} == $6:2\"",
            "          then:",
            "            - action: $7:log",
            "              args: [\"$8:Nested if: iteration is 2\"]",
            "          else:",
            "            - action: $9:log",
            "              args: [\"$10:Nested if: iteration is not 2\"]"
        ],
        "description": "Add a for loop with nested if statement"
    },
    "Nested For in If": {
        "prefix": "nested_for_if",
        "body": [
            "- name: \"$1:Nested for in if\"",
            "  if:",
            "    condition: \"$2:true\"",
            "    then:",
            "      - for:",
            "          condition: \"$3:1..$4:2\"",
            "          steps:",
            "            - action: $5:log",
            "              args: [\"$6:Nested for iteration \\${iteration}\"]",
            "    else:",
            "      - action: $7:log",
            "        args: [\"$8:Condition is false\"]"
        ],
        "description": "Add an if statement with nested for loop"
    },
    "Control Flow with Continue on Failure": {
        "prefix": "control_continue",
        "body": [
            "- name: \"$1:Control flow with continue\"",
            "  for:",
            "    condition: \"$2:1..$3:3\"",
            "    steps:",
            "      - action: $4:log",
            "        args: [\"$5:Processing iteration \\${iteration}\"]",
            "      - action: $6:assert",
            "        args: [\"\\${iteration}\", \"!=\", \"$7:2\", \"Should not be 2\"]",
            "        continue_on_failure: $8:true"
        ],
        "description": "Add control flow with continue_on_failure"
    },
    "Variables Section": {
        "prefix": "variables",
        "body": [
            "variables:",
            "  vars:",
            "    $1:variable_name: \"$2:value\"",
            "  secrets:",
            "    $3:secret_name:",
            "      file: \"$4:path/to/secret.txt\"",
            "      mask_output: $5:true"
        ],
        "description": "Add variables section with vars and secrets"
    },
    "Retry Configuration": {
        "prefix": "retry",
        "body": [
            "retry:",
            "  attempts: $1:3",
            "  delay: $2:1s",
            "  backoff: \"$3:exponential\"",
            "  max_delay: $4:10s",
            "  jitter: $5:true"
        ],
        "description": "Add retry configuration with all options"
    },
    "Continue on Failure": {
        "prefix": "continue_on_failure",
        "body": [
            "continue_on_failure: $1:true"
        ],
        "description": "Add continue_on_failure flag"
    },
    "Verbose Output": {
        "prefix": "verbose",
        "body": [
            "verbose: $1:true"
        ],
        "description": "Add verbose output flag"
    }
}