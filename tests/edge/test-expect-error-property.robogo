testcase: expect_error_property_test
description: Test the expect_error property with various error validation types

steps:
  - name: Test expect any error with HTTP
    action: http
    args: ["GET", "http://invalid-url-that-will-fail.com"]
    expect_error: "any"

  - name: Test expect error contains specific text
    action: http
    args: ["GET", "http://invalid-url-that-will-fail.com"]
    expect_error: "no such host"

  - name: Test expect error with detailed configuration
    action: http
    args: ["GET", "http://invalid-url-that-will-fail.com"]
    expect_error:
      type: "contains"
      message: "no such host"

  - name: Test expect error matches regex pattern
    action: http
    args: ["GET", "http://invalid-url-that-will-fail.com"]
    expect_error:
      type: "matches"
      message: ".*no such host.*"

  - name: Test expect error starts with text
    action: http
    args: ["GET", "http://invalid-url-that-will-fail.com"]
    expect_error:
      type: "starts_with"
      message: "request failed"

  - name: Test expect error ends with text
    action: http
    args: ["GET", "http://invalid-url-that-will-fail.com"]
    expect_error:
      type: "ends_with"
      message: "no such host"

  - name: Test expect error not contains
    action: http
    args: ["GET", "http://invalid-url-that-will-fail.com"]
    expect_error:
      type: "not_contains"
      message: "SUCCESS"

  - name: Test expect error with assert action
    action: assert
    args: ["0", ">", "invalid_value"]
    expect_error: "Assertion failed"

  - name: Test expect error with exact match
    action: assert
    args: ["0", ">", "invalid_value"]
    expect_error:
      type: "exact"
      message: "Assertion failed: '0' > 'invalid_value' - Assertion passed"

  - name: Test expect error with variable action
    action: variable
    args: ["get_variable", "nonexistent_var"]
    expect_error: "Variable not found"

  - name: Test expect error with postgres action
    action: postgres
    args: ["query", "invalid-connection-string", "SELECT 1"]
    expect_error: "connection"

  - name: Test expect error with get_time action
    action: get_time
    args: ["invalid_format"]
    expect_error: "unsupported"

  - name: Test expect error with get_random action
    action: get_random
    args: ["invalid_arg"]
    expect_error: "numeric"

  - name: Test expect error with concat action
    action: concat
    args: []
    expect_error: "at least"

  - name: Test expect error with length action
    action: length
    args: []
    expect_error: "at least"

  - name: Test expect error with control action
    action: control
    args: ["invalid_control", "condition"]
    expect_error: "unsupported"

  - name: Test expect error with tdm action
    action: tdm
    args: ["invalid_operation"]
    expect_error: "unsupported"

  - name: Test expect error with sleep action
    action: sleep
    args: ["invalid_duration"]
    expect_error: "duration"

  - name: Test expect error with log action
    action: log
    args: []
    expect_error: "at least"

  - name: Test that successful action fails expect_error
    action: log
    args: ["This should succeed"]
    expect_error: "any"
    continue_on_failure: true

  - name: Test expect error with complex nested action
    action: http
    args: ["POST", "http://invalid-url.com", '{"data": "test"}', '{"Content-Type": "application/json"}']
    expect_error: "no such host"

  - name: Test expect error with division by zero
    action: assert
    args: ["10", "%", "0", "==", "0"]
    expect_error: "division by zero"

  - name: Test expect error with invalid regex pattern
    action: assert
    args: ["test", "matches", "[invalid"]
    expect_error: "invalid regex pattern"

  - name: Test expect error with unsupported numeric operator
    action: assert
    args: ["5", "invalid_op", "3"]
    expect_error: "unsupported numeric operator"

  - name: Test expect error with unsupported string operator
    action: assert
    args: ["test", "invalid_op", "value"]
    expect_error: "unsupported string operator"

  - name: Test expect error with insufficient arguments
    action: assert
    args: ["value"]
    expect_error: "at least 3 arguments"

  - name: Final validation
    action: log
    args: ["All expect_error property tests completed successfully!"] 