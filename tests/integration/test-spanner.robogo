testcase: "Spanner Basic Operations"
description: "Test Google Cloud Spanner operations with emulator"

variables:
  vars:
    # Spanner connection details - these match the gcloud create commands
    spanner_project: "your-project-id"
    spanner_instance: "robogo-test-instance"
    spanner_database: "robogo-test-db"
    spanner_connection: "projects/${spanner_project}/instances/${spanner_instance}/databases/${spanner_database}"
    
    # Table and column names
    table_name: "users"
    id_column: "id"
    name_column: "name"
    email_column: "email"
    created_at_column: "created_at"
    
    # Test data
    user1_id: "user1"
    user1_name: "John Doe"
    user1_email: "john@example.com"
    user1_created_at: "2024-01-01T00:00:00Z"
    
    user2_id: "user2"
    user2_name: "Jane Smith"
    user2_email: "jane@example.com"
    user2_created_at: "2024-01-02T00:00:00Z"
    
    updated_name: "John Updated"

steps:
  - name: "Connect to Spanner"
    action: spanner
    args: 
      - "connect"
      - "${spanner_connection}"
    result: connection_result

  - name: "Create test table"
    action: spanner
    args:
      - "execute"
      - "${spanner_connection}"
      - "CREATE TABLE IF NOT EXISTS users (id INT64, name STRING(100), email STRING(100), created_at TIMESTAMP) PRIMARY KEY (id)"
    result: create_table_result

  - name: "Insert test data"
    action: spanner
    args:
      - "execute"
      - "${spanner_connection}"
      - "INSERT INTO users (id, name, email, created_at) VALUES (@id, @name, @email, @created_at)"
      - {"id": 1, "name": "John Doe", "email": "john@example.com", "created_at": "2024-01-01T00:00:00Z"}
    result: insert_result

  - name: "Query test data"
    action: spanner
    args:
      - "query"
      - "${spanner_connection}"
      - "SELECT id, name, email FROM users WHERE id = @id"
      - {"id": 1}
    result: query_result

  - name: "Verify query result"
    action: assert
    args: [query_result, "contains", "John Doe", "Should return user data"]

  - name: "Query all users"
    action: spanner
    args:
      - "query"
      - "${spanner_connection}"
      - "SELECT COUNT(*) as user_count FROM users"
    result: count_result

  - name: "Verify user count"
    action: assert
    args: [count_result, "contains", '"user_count":1', "Should return correct user count"]

  - name: "Update user data"
    action: spanner
    args:
      - "execute"
      - "${spanner_connection}"
      - "UPDATE users SET name = @name WHERE id = @id"
      - {"id": 1, "name": "John Smith"}
    result: update_result

  - name: "Verify update"
    action: spanner
    args:
      - "query"
      - "${spanner_connection}"
      - "SELECT name FROM users WHERE id = @id"
      - {"id": 1}
    result: verify_update_result

  - name: "Verify updated name"
    action: assert
    args: [verify_update_result, "contains", "John Smith", "Should return updated name"]

  - name: "Delete test data"
    action: spanner
    args:
      - "execute"
      - "${spanner_connection}"
      - "DELETE FROM users WHERE id = @id"
      - {"id": 1}
    result: delete_result

  - name: "Verify deletion"
    action: spanner
    args:
      - "query"
      - "${spanner_connection}"
      - "SELECT COUNT(*) as user_count FROM users"
    result: final_count_result

  - name: "Verify final count"
    action: assert
    args: [final_count_result, "contains", '"user_count":0', "Should return zero users after deletion"]

  - name: "Close Spanner connection"
    action: spanner
    args: 
      - "close"
      - "${spanner_connection}"
    result: close_result 