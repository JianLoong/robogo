# Test Database Setup for Parallel Testing
# This file verifies the database configuration for parallel testing

testcase: "Database Setup Verification"
description: "Verify database configuration for parallel testing"

variables:
  vars:
    db_host: "192.168.0.174"
    db_port: "5432"
    db_name: "testdb"
    db_user: "user1"
  secrets:
    db_password:
        file: "secret.txt"
        mask_output: false

steps:
  - name: "Log database configuration"
    action: log
    args: ["Testing database configuration for parallel testing"]
  
  - name: "Log database details"
    action: log
    args: ["Database: ${db_name}, User: ${db_user}, Host: ${db_host}:${db_port}"]
  
  # Build connection string
  - name: "Build connection string"
    action: concat
    args: ["postgres://", "${db_user}", ":", "${db_password}", "@", "${db_host}", ":", "${db_port}", "/", "${db_name}", "?sslmode=disable"]
    result: db_connection_string

  # Test database connection
  - name: "Test database connection"
    action: postgres
    args: ["connect", "${db_connection_string}"]
    result: connection_result

  - name: "Log connection result"
    action: log
    args: ["Connection result: ${connection_result}"]

  # Test basic query
  - name: "Test basic query"
    action: postgres
    args: ["query", "${db_connection_string}", "SELECT version()"]
    result: version_result

  - name: "Log PostgreSQL version"
    action: log
    args: ["PostgreSQL version: ${version_result}"]

  # Test table creation
  - name: "Create test table"
    action: postgres
    args: ["execute", "${db_connection_string}", "CREATE TABLE IF NOT EXISTS setup_test (id SERIAL PRIMARY KEY, name VARCHAR(100), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)"]
    result: create_table_result

  - name: "Log table creation"
    action: log
    args: ["Table creation result: ${create_table_result}"]

  # Test insert
  - name: "Insert test data"
    action: postgres
    args: ["execute", "${db_connection_string}", "INSERT INTO setup_test (name) VALUES ($1)", ["Test Setup"]]
    result: insert_result

  - name: "Log insert result"
    action: log
    args: ["Insert result: ${insert_result}"]

  # Test query
  - name: "Query test data"
    action: postgres
    args: ["query", "${db_connection_string}", "SELECT * FROM setup_test"]
    result: query_result

  - name: "Log query result"
    action: log
    args: ["Query result: ${query_result}"]

  # Clean up
  - name: "Drop test table"
    action: postgres
    args: ["execute", "${db_connection_string}", "DROP TABLE IF EXISTS setup_test"]
    result: drop_result

  - name: "Log cleanup result"
    action: log
    args: ["Cleanup result: ${drop_result}"]

  # Close connection
  - name: "Close database connection"
    action: postgres
    args: ["close", "${db_connection_string}"]
    result: close_result

  - name: "Log close result"
    action: log
    args: ["Close result: ${close_result}"]

  # Success message
  - name: "Setup verification complete"
    action: log
    args: ["âœ… Database setup verification completed successfully!"]

# This test verifies:
# 1. Database connection works
# 2. User has proper permissions
# 3. Basic CRUD operations work
# 4. Connection can be closed properly
#
# Database setup requirements:
# - Database: robogo_testdb
# - User: robogo_testuser
# - Permissions: CREATE, INSERT, SELECT, UPDATE, DELETE, DROP on robogo_testdb 