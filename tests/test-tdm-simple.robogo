# Simple TDM Test
# This file demonstrates basic TDM functionality in Robogo

testcase: "Simple TDM Test"
description: "Basic test to demonstrate TDM features"

# Environment configuration
environments:
  - name: "test"
    description: "Test environment"
    variables:
      api_url: "https://api.example.com"
      timeout: 30
    overrides:
      debug_mode: true

# Test Data Management configuration
data_management:
  environment: "test"
  isolation: true
  cleanup: true
  
  # Simple data sets
  data_sets:
    - name: "test_users"
      description: "Test user data"
      version: "1.0"
      data:
        user1:
          name: "John Doe"
          email: "john@example.com"
          age: 30
        user2:
          name: "Jane Smith"
          email: "jane@example.com"
          age: 25
      schema:
        name: "string"
        email: "email"
        age: "number"
      required: ["name", "email"]
      unique: ["email"]

  # Data validation
  validation:
    - name: "email_validation"
      type: "format"
      field: "test_users.user1.email"
      rule: "email"
      message: "User email must be valid"
      severity: "error"

    - name: "age_validation"
      type: "range"
      field: "test_users.user1.age"
      rule:
        min: 18
        max: 100
      message: "User age must be between 18 and 100"
      severity: "warning"

  # Setup steps
  setup:
    - name: "TDM Setup"
      action: log
      args: ["Setting up TDM test environment"]

  # Teardown steps
  teardown:
    - name: "TDM Cleanup"
      action: log
      args: ["Cleaning up TDM test environment"]

# Test variables
variables:
  vars:
    test_name: "Simple TDM Test"
    db_host: "192.168.0.174"
    db_port: "5432"
    db_name: "postgres"
    db_user: "postgres"
  secrets:
    db_password:
      file: "secret.txt"
      mask_output: true

# Test steps
steps:
  # Test data set loading
  - name: "Log loaded data"
    action: log
    args: ["User 1: ${test_users.user1.name} (${test_users.user1.email})"]
  
  - name: "Log user 2"
    action: log
    args: ["User 2: ${test_users.user2.name} (${test_users.user2.email})"]

  # Build database connection string
  - name: "Build connection string"
    action: log
    args: ["Building connection string for database"]
  
  # Test database connection
  - name: "Test database connection"
    action: postgres
    args: ["connect", "postgres://${db_user}:${db_password}@${db_host}:${db_port}/${db_name}?sslmode=disable"]
    result: connection_result

  - name: "Log connection result"
    action: log
    args: ["Connection result: ${connection_result}"]

  # Test data generation using database
  - name: "Create test table for TDM"
    action: postgres
    args: ["execute", "postgres://${db_user}:${db_password}@${db_host}:${db_port}/${db_name}?sslmode=disable", "CREATE TABLE IF NOT EXISTS tdm_test_users (id SERIAL PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), age INTEGER, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)"]
    result: create_table_result

  - name: "Insert TDM test data"
    action: postgres
    args: ["execute", "postgres://${db_user}:${db_password}@${db_host}:${db_port}/${db_name}?sslmode=disable", "INSERT INTO tdm_test_users (name, email, age) VALUES ($1, $2, $3)", ["${test_users.user1.name}", "${test_users.user1.email}", "30"]]
    result: insert_result

  - name: "Query TDM test data"
    action: postgres
    args: ["query", "postgres://${db_user}:${db_password}@${db_host}:${db_port}/${db_name}?sslmode=disable", "SELECT name, email, age FROM tdm_test_users WHERE name = $1", ["${test_users.user1.name}"]]
    result: query_result

  - name: "Log database query result"
    action: log
    args: ["Database query result: ${query_result}"]

  # Clean up test data
  - name: "Clean up TDM test data"
    action: postgres
    args: ["execute", "postgres://${db_user}:${db_password}@${db_host}:${db_port}/${db_name}?sslmode=disable", "DELETE FROM tdm_test_users WHERE name = $1", ["${test_users.user1.name}"]]
    result: cleanup_result

  - name: "Drop test table"
    action: postgres
    args: ["execute", "postgres://${db_user}:${db_password}@${db_host}:${db_port}/${db_name}?sslmode=disable", "DROP TABLE IF EXISTS tdm_test_users"]
    result: drop_table_result

  - name: "Close database connection"
    action: postgres
    args: ["close", "postgres://${db_user}:${db_password}@${db_host}:${db_port}/${db_name}?sslmode=disable"]
    result: close_result

  # Test assertions
  - name: "Assert user exists"
    action: assert
    args: ["${test_users.user1.name}", "==", "John Doe", "User 1 should be John Doe"]
  
  - name: "Assert email format"
    action: assert
    args: ["${test_users.user1.email}", "contains", "@", "Email should contain @"]
  
  - name: "Assert age range"
    action: assert
    args: ["${test_users.user1.age}", ">=", "18", "User should be 18 or older"]

  # Success message
  - name: "Test completed"
    action: log
    args: ["âœ… Simple TDM test completed successfully!"] 