# Test File-based Secret Variables
# This file demonstrates file-based secret variables in Robogo

testcase: "Secret Variable Test"
description: "Test file to demonstrate file-based secret variables"

variables:
  vars:
    db_host: "192.168.0.174"
    db_port: "5432"
    db_name: "postgres"
    db_user: "postgres"
  secrets:
    db_password:
      file: "secret.txt"
      mask_output: true

steps:
  - name: "Show database host"
    action: log
    args: ["Database host: ${db_host}"]
  - name: "Show database user"
    action: log
    args: ["Database user: ${db_user}"]
  - name: "Show masked database password"
    action: log
    args: ["Database password: ${db_password}"]
  - name: "Build connection string with secret"
    action: concat
    args: ["postgres://", "${db_user}", ":", "${db_password}", "@", "${db_host}", ":", "${db_port}", "/", "${db_name}", "?sslmode=disable"]
    result: db_connection_string
  - name: "Show connection string (secrets masked)"
    action: log
    args: ["Connection string: ${db_connection_string}"]
  - name: "Test PostgreSQL connection with secret"
    action: postgres
    args: ["connect", "${db_connection_string}"]
    result: connection_result
  - name: "Log connection result"
    action: log
    args: ["Connection result: ${connection_result}"]
  - name: "Final message"
    action: log
    args: ["üîê Secret variable test completed!"]

# Secret Variable Usage:
#
# File-based secret (single value per file):
#   secrets:
#     my_secret:
#       file: "path/to/secret.txt"
#       mask_output: true
#
# Secret file format (secret.txt):
#   your_secret_value
#   (just the value, no key)
#
# To run this test:
# 1. Create secret.txt with just the secret value (e.g., your_password)
# 2. Run: ./robogo.exe run tests/test-secrets.robogo
#
# Features:
# - File-based secret resolution (one value per file)
# - Secret masking in output for security
# - Integration with variable substitution
# - Simple and clean approach 
