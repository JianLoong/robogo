testcase: "TC-POSTS-CONTAINS-001"
description: "Test JSONPlaceholder posts API using contains assertions"

variables:
  vars:
    base_url: "https://jsonplaceholder.typicode.com/posts"

steps:
  - name: "Fetch all posts"
    action: http
    args: ["GET", "${base_url}"]
    result: "posts_response"

  - name: "Verify response is successful"
    action: assert
    args: ["${posts_response.status_code}", "==", "200", "Should return 200 OK"]

  - name: "Verify response contains JSON content type"
    action: assert
    args: ["${posts_response.headers.content_type}", "contains", "application/json", "Should be JSON response"]

  - name: "Verify response body contains expected JSON structure"
    action: assert
    args: ["${posts_response.body}", "contains", "userId", "Response should contain userId field"]

  - name: "Verify response body contains post titles"
    action: assert
    args: ["${posts_response.body}", "contains", "title", "Response should contain title field"]

  - name: "Verify response body contains post bodies"
    action: assert
    args: ["${posts_response.body}", "contains", "body", "Response should contain body field"]

  - name: "Verify response body contains post IDs"
    action: assert
    args: ["${posts_response.body}", "contains", "id", "Response should contain id field"]

  - name: "Test getting a specific post"
    action: http
    args: ["GET", "${base_url}/1"]
    result: "single_post"

  - name: "Verify single post has expected content"
    action: assert
    args: ["${single_post.body}", "contains", "sunt aut facere", "First post should contain expected title"]

  - name: "Verify single post has user ID"
    action: assert
    args: ["${single_post.body}", "contains", "\"userId\": 1", "First post should belong to user 1"]

  - name: "Test filtering by user ID"
    action: http
    args: ["GET", "${base_url}?userId=1"]
    result: "user1_posts"

  - name: "Verify user 1 posts contain only user 1 data"
    action: assert
    args: ["${user1_posts.body}", "contains", "\"userId\": 1", "User 1 posts should contain userId 1"]

  - name: "Verify user 1 posts don't contain other users (spot check)"
    action: assert
    args: ["${user1_posts.body}", "not_contains", "\"userId\": 5", "User 1 posts should not contain userId 5"]

  - name: "Test pagination"
    action: http
    args: ["GET", "${base_url}?_limit=3"]
    result: "limited_posts"

  - name: "Verify limited response structure"
    action: assert
    args: ["${limited_posts.body}", "contains", "[\n  {", "Limited posts should start with array structure"]

  - name: "Verify limited response doesn't contain too many posts"
    action: assert
    args: ["${limited_posts.body}", "not_contains", "\"id\": 10", "Limited to 3 posts should not contain ID 10"]

  - name: "Test searching posts"
    action: http
    args: ["GET", "${base_url}?title_like=qui"]
    result: "search_posts"

  - name: "Verify search results contain the search term"
    action: assert
    args: ["${search_posts.body}", "contains", "qui", "Search results should contain the search term"]

  - name: "Final validation - check error handling"
    action: http
    args: ["GET", "${base_url}/999"]
    result: "not_found_post"

  - name: "Verify 404 response"
    action: assert
    args: ["${not_found_post.status_code}", "==", "404", "Non-existent post should return 404"]

  - name: "Verify 404 response body"
    action: assert
    args: ["${not_found_post.body}", "contains", "{}", "404 response should contain empty object"]

  - name: "Summary log"
    action: log
    args: ["All contains assertions passed successfully for posts API testing"]