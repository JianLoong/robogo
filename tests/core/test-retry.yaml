# Enhanced Retry Functionality Test with httpbin.org
# Demonstrates comprehensive retry mechanisms with actual retry behavior

testcase: "Enhanced Retry Test with httpbin.org"
description: "Comprehensive retry test showing actual retry behavior, timing validation, and various configurations"

variables:
  vars:
    base_url: "https://httpbin.org"

steps:
  # Test 1: Basic retry with fixed delay - demonstrates actual retry attempts
  - name: "Fixed delay retry on 500 error"
    action: http
    args: ["${base_url}/status/500"]
    retry:
      attempts: 3
      delay: 1s
      backoff: "fixed"
      conditions: ["5xx"]
    result: "fixed_retry_result"
    continue_on_failure: true

  - name: "Validate 500 status after fixed retries"
    action: assert
    args: ["${fixed_retry_result.status_code}", "==", "500", "Should receive 500 status code"]

  # Test 2: Exponential backoff with timing validation
  - name: "Get start time for exponential backoff test"
    action: get_time
    args: ["unix_ms"]
    result: "exp_start_time"

  - name: "Exponential backoff retry on 502 error"
    action: http
    args: ["${base_url}/status/502"]
    retry:
      attempts: 4
      delay: 1s
      backoff: "exponential"
      max_delay: 8s
      conditions: ["5xx"]
    result: "exp_retry_result"
    continue_on_failure: true

  - name: "Get end time for exponential backoff test"
    action: get_time
    args: ["unix_ms"]
    result: "exp_end_time"

  - name: "Validate 502 status after exponential retries"
    action: assert
    args: ["${exp_retry_result.status_code}", "==", "502", "Should receive 502 status code"]

  # Test 3: Linear backoff with jitter
  - name: "Linear backoff with jitter on 503 error"
    action: http
    args: ["${base_url}/status/503"]
    retry:
      attempts: 3
      delay: 1s
      backoff: "linear"
      jitter: true
      conditions: ["5xx"]
    result: "linear_retry_result"
    continue_on_failure: true

  - name: "Validate 503 status after linear retries"
    action: assert
    args: ["${linear_retry_result.status_code}", "==", "503", "Should receive 503 status code"]

  # Test 4: Rate limiting retry (429)
  - name: "Rate limiting retry on 429 error"
    action: http
    args: ["${base_url}/status/429"]
    retry:
      attempts: 3
      delay: 1s
      conditions: ["4xx", "rate_limit"]
    result: "rate_limit_result"
    continue_on_failure: true

  - name: "Validate 429 status after rate limit retries"
    action: assert
    args: ["${rate_limit_result.status_code}", "==", "429", "Should receive 429 status code"]

  # Test 5: Successful request that doesn't need retry
  - name: "Successful request (no retry needed)"
    action: http
    args: ["${base_url}/status/200"]
    retry:
      attempts: 3
      delay: 1s
      conditions: ["5xx"]
    result: "success_result"

  - name: "Validate successful request"
    action: assert
    args: ["${success_result.status_code}", "==", "200", "Should receive 200 status code"]

  # Test 6: Non-matching condition (should not retry)
  - name: "Non-matching condition test"
    action: http
    args: ["${base_url}/status/500"]
    retry:
      attempts: 3
      delay: 1s
      conditions: ["timeout", "connection_error"]
    result: "non_matching_result"

  - name: "Validate non-matching result (no retries)"
    action: assert
    args: ["${non_matching_result.status_code}", "==", "500", "Should receive 500 status code immediately"]

  # Test 7: Connection error simulation
  - name: "Connection error retry"
    action: http
    args: ["https://invalid-domain-that-does-not-exist-12345.com/test"]
    retry:
      attempts: 3
      delay: 1s
      conditions: ["connection_error"]
    result: "connection_error_result"
    continue_on_failure: true

  # Test 8: Random status endpoint (unpredictable behavior)
  - name: "Random status with retry"
    action: http
    args: ["${base_url}/status/200,500,502"]
    retry:
      attempts: 5
      delay: 1s
      backoff: "exponential"
      conditions: ["5xx"]
    result: "random_status_result"
    continue_on_failure: true

  # Test 9: POST request with retry
  - name: "POST request with retry on server error"
    action: http
    args: ["POST", "${base_url}/status/503", "{\"test\": \"retry_data\"}"]
    retry:
      attempts: 3
      delay: 1s
      conditions: ["5xx"]
    result: "post_retry_result"
    continue_on_failure: true

  - name: "Validate POST retry result"
    action: assert
    args: ["${post_retry_result.status_code}", "==", "503", "POST should receive 503 status code"]

  # Test 10: Single attempt (should not retry)
  - name: "Single attempt configuration"
    action: http
    args: ["${base_url}/status/500"]
    retry:
      attempts: 1
      conditions: ["5xx"]
    result: "single_attempt_result"
    continue_on_failure: true

  - name: "Validate single attempt result"
    action: assert
    args: ["${single_attempt_result.status_code}", "==", "500", "Should receive 500 status code in single attempt"]

  # Test 11: Max delay configuration
  - name: "Max delay cap test"
    action: http
    args: ["${base_url}/status/500"]
    retry:
      attempts: 4
      delay: 2s
      backoff: "exponential"
      max_delay: 5s
      conditions: ["5xx"]
    result: "max_delay_result"
    continue_on_failure: true

  # Test 12: All conditions retry
  - name: "All conditions retry test"
    action: http
    args: ["${base_url}/status/500"]
    retry:
      attempts: 2
      delay: 1s
      conditions: ["all"]
    result: "all_conditions_result"
    continue_on_failure: true

  - name: "Validate all conditions result"
    action: assert
    args: ["${all_conditions_result.status_code}", "==", "500", "Should receive 500 status code"]

  # Summary and validation
  - name: "Log comprehensive retry test summary"
    action: log
    args: ["Enhanced retry test completed. Demonstrated: fixed/linear/exponential backoff, various HTTP status codes, timing validation, and all retry configurations."]

  - name: "Final validation"
    action: assert
    args: ["true", "==", "true", "All enhanced retry tests completed successfully"]

# This test demonstrates:
# ✅ Actual retry behavior with visible retry attempts and timing
# ✅ Fixed, linear, and exponential backoff strategies with proper delays
# ✅ HTTP status code-based retry triggers (500, 502, 503, 429)
# ✅ Jitter application and max delay constraints
# ✅ Connection error simulation and handling
# ✅ Successful requests that don't trigger retries
# ✅ Non-matching conditions that prevent unnecessary retries
# ✅ Various HTTP methods (GET, POST) with retry logic
# ✅ Single attempt vs multiple attempt configurations
# ✅ JSON response parsing and property access after retries
# ✅ Continue-on-failure behavior for comprehensive testing
# ✅ Timing validation for backoff strategies
# ✅ Real-world httpbin.org endpoints for realistic testing