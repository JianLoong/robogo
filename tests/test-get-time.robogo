# Test Get Time Action
# This file tests all supported formats of the get_time action

testcase: "Get Time Action Test"
description: "Covers all built-in and custom formats for get_time action"

steps:
  # ISO 8601 format
  - name: "Get ISO time"
    action: get_time
    args: ["iso"]
    result: iso_time
  - name: "Assert ISO time format"
    action: assert
    args: ["${iso_time}", "contains", "T", "ISO time should contain 'T'"]

  # ISO date only
  - name: "Get ISO date"
    action: get_time
    args: ["iso_date"]
    result: iso_date
  - name: "Assert ISO date format"
    action: assert
    args: ["${iso_date}", "contains", "-", "ISO date should contain '-'"]

  # ISO time only
  - name: "Get ISO time only"
    action: get_time
    args: ["iso_time"]
    result: iso_time_only
  - name: "Assert ISO time only format"
    action: assert
    args: ["${iso_time_only}", "contains", ":", "ISO time only should contain ':'"]

  # Standard datetime
  - name: "Get datetime"
    action: get_time
    args: ["datetime"]
    result: datetime
  - name: "Assert datetime format"
    action: assert
    args: ["${datetime}", "contains", " ", "Datetime should contain a space"]

  # Date only
  - name: "Get date only"
    action: get_time
    args: ["date"]
    result: date_only
  - name: "Assert date only format"
    action: assert
    args: ["${date_only}", "contains", "-", "Date only should contain '-'"]

  # Time only
  - name: "Get time only"
    action: get_time
    args: ["time"]
    result: time_only
  - name: "Assert time only format"
    action: assert
    args: ["${time_only}", "contains", ":", "Time only should contain ':'"]

  # Compact timestamp
  - name: "Get compact timestamp"
    action: get_time
    args: ["timestamp"]
    result: compact_timestamp
  - name: "Assert compact timestamp format"
    action: assert
    args: ["${compact_timestamp}", "not_contains", "-", "Compact timestamp should not contain '-'"]

  # Unix timestamp
  - name: "Get unix timestamp"
    action: get_time
    args: ["unix"]
    result: unix_timestamp
  - name: "Assert unix timestamp is numeric"
    action: assert
    args: ["${unix_timestamp}", "matches", "^[0-9]+$", "Unix timestamp should be numeric"]

  # Unix ms timestamp
  - name: "Get unix ms timestamp"
    action: get_time
    args: ["unix_ms"]
    result: unix_ms_timestamp
  - name: "Assert unix ms timestamp is numeric"
    action: assert
    args: ["${unix_ms_timestamp}", "matches", "^[0-9]+$", "Unix ms timestamp should be numeric"]

  # RFC3339
  - name: "Get RFC3339"
    action: get_time
    args: ["rfc3339"]
    result: rfc3339_time
  - name: "Assert RFC3339 format"
    action: assert
    args: ["${rfc3339_time}", "contains", "T", "RFC3339 time should contain 'T'"]

  # RFC1123
  - name: "Get RFC1123"
    action: get_time
    args: ["rfc1123"]
    result: rfc1123_time
  - name: "Assert RFC1123 format"
    action: assert
    args: ["${rfc1123_time}", "contains", ",", "RFC1123 time should contain ','"]

  # ISO8601
  - name: "Get ISO8601"
    action: get_time
    args: ["iso8601"]
    result: iso8601_time
  - name: "Assert ISO8601 format"
    action: assert
    args: ["${iso8601_time}", "contains", "T", "ISO8601 time should contain 'T'"]

  # Custom Go format
  - name: "Get custom format"
    action: get_time
    args: ["Monday, January 2, 2006 at 3:04 PM"]
    result: custom_format
  - name: "Assert custom format"
    action: assert
    args: ["${custom_format}", "contains", ",", "Custom format should contain ','"]

  # Default (no args)
  - name: "Get default time"
    action: get_time
    result: default_time
  - name: "Assert default time format"
    action: assert
    args: ["${default_time}", "contains", "T", "Default time should contain 'T'"]

  # Timezone test (UTC)
  - name: "Get UTC time"
    action: get_time
    args: ["iso", "UTC"]
    result: utc_time
  - name: "Assert UTC time ends with Z"
    action: assert
    args: ["${utc_time}", "ends_with", "Z", "UTC time should end with 'Z'"]

  # Timezone test (Local)
  - name: "Get Local time"
    action: get_time
    args: ["iso", "Local"]
    result: local_time
  - name: "Assert Local time is not empty"
    action: assert
    args: ["${local_time}", "!=", "", "Local time should not be empty"]

  # Final log
  - name: "Log completion"
    action: log
    args: ["All get_time action tests completed successfully!"] 