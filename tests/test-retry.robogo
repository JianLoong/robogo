# Test Retry Functionality
# This file demonstrates retry mechanisms for different scenarios

testcase: "Retry Mechanism Test"
description: "Test various retry configurations and scenarios"

variables:
  vars:
    base_url: "https://httpbin.org"
    retry_delay: 1s
    max_retries: 3

steps:
  - name: "Basic retry with fixed delay"
    action: http
    args: ["GET", "${base_url}/status/500"]
    retry:
      attempts: 3
      delay: 1s
      backoff: "fixed"
      conditions: ["5xx"]
    result: "basic_retry_result"

  - name: "Exponential backoff retry"
    action: http
    args: ["GET", "${base_url}/status/503"]
    retry:
      attempts: 4
      delay: 1s
      backoff: "exponential"
      max_delay: 10s
      conditions: ["5xx"]
    result: "exp_retry_result"

  - name: "Linear backoff with jitter"
    action: http
    args: ["GET", "${base_url}/status/502"]
    retry:
      attempts: 3
      delay: 2s
      backoff: "linear"
      jitter: true
      conditions: ["5xx"]
    result: "linear_retry_result"

  - name: "Retry on rate limiting"
    action: http
    args: ["GET", "${base_url}/status/429"]
    retry:
      attempts: 2
      delay: 3s
      backoff: "fixed"
      conditions: ["rate_limit", "4xx"]
    result: "rate_limit_result"

  - name: "Retry on connection errors (simulated)"
    action: http
    args: ["GET", "https://invalid-domain-that-does-not-exist-12345.com"]
    retry:
      attempts: 2
      delay: 1s
      backoff: "fixed"
      conditions: ["connection_error"]
    result: "connection_retry_result"
    continue_on_failure: true

  - name: "Successful request (no retry needed)"
    action: http
    args: ["GET", "${base_url}/status/200"]
    retry:
      attempts: 3
      delay: 1s
      conditions: ["5xx"]
    result: "success_result"

  - name: "Log retry summary"
    action: log
    args: ["Retry tests completed. Check results above for retry behavior."]

  - name: "Assert retry results"
    action: assert
    args: ["${basic_retry_result}", "contains", "500", "Basic retry should have attempted 500 status"]

  - name: "Test with minimal retry config"
    action: http
    args: ["GET", "${base_url}/status/500"]
    retry:
      attempts: 2
    result: "minimal_retry_result"

  - name: "Test retry with all conditions"
    action: http
    args: ["GET", "${base_url}/status/503"]
    retry:
      attempts: 2
      delay: 1s
      conditions: ["all"]
    result: "all_conditions_result"

# Indent all additional retry scenarios by two spaces so they are part of the steps list.
# Remove the comment '# --- Additional Retry Scenarios ---'.

  - name: "Retry failing postgres query"
    action: postgres
    args: ["query", "postgres://invalid:invalid@localhost:5432/invalid", "SELECT * FROM non_existent_table"]
    retry:
      attempts: 2
      delay: 1s
      backoff: "fixed"
      conditions: ["error"]
    result: db_retry_result
    continue_on_failure: true

  - name: "Retry successful postgres query (should not retry)"
    action: postgres
    args: ["query", "postgres://user:pass@localhost:5432/postgres", "SELECT 1"]
    retry:
      attempts: 2
      delay: 1s
      backoff: "fixed"
      conditions: ["error"]
    result: db_success_result

  - name: "Retry variable set with missing args"
    action: variable
    args: ["set"]
    retry:
      attempts: 2
      delay: 1s
      backoff: "fixed"
      conditions: ["set requires variable_name and value"]
    result: var_retry_result
    continue_on_failure: true

  - name: "Retry concat with missing args"
    action: concat
    args: ["only_one"]
    retry:
      attempts: 2
      delay: 1s
      backoff: "fixed"
      conditions: ["concat action requires at least 2 arguments"]
    result: concat_retry_result
    continue_on_failure: true

  - name: "Retry with attempts 1 (should not retry)"
    action: http
    args: ["GET", "https://httpbin.org/status/500"]
    retry:
      attempts: 1
      delay: 1s
      conditions: ["5xx"]
    result: single_attempt_result
    continue_on_failure: true

  - name: "Retry with non-matching condition (should not retry)"
    action: http
    args: ["GET", "https://httpbin.org/status/500"]
    retry:
      attempts: 3
      delay: 1s
      conditions: ["timeout"]
    result: non_matching_condition_result
    continue_on_failure: true

  - name: "Retry with linear backoff"
    action: http
    args: ["GET", "https://httpbin.org/status/502"]
    retry:
      attempts: 3
      delay: 1s
      backoff: "linear"
      conditions: ["5xx"]
    result: linear_backoff_result
    continue_on_failure: true

  - name: "Retry with exponential backoff"
    action: http
    args: ["GET", "https://httpbin.org/status/503"]
    retry:
      attempts: 3
      delay: 1s
      backoff: "exponential"
      conditions: ["5xx"]
    result: exponential_backoff_result
    continue_on_failure: true 