# Test HTTP Actions
# This file demonstrates HTTP request capabilities in Robogo

testcase: "HTTP Actions Test"
description: "Test file to demonstrate HTTP request actions with various methods, options, and certificate support"

steps:
  - name: "GET request to httpbin"
    action: http_get
    args: ["https://httpbin.org/get"]
    result: get_response
  
  - name: "Log GET response status"
    action: log
    args: ["GET Response Status: ${get_response}"]
  
  # Test HTTP POST request with JSON body
  - name: "POST request to httpbin"
    action: http_post
    args: ["https://httpbin.org/post", '{"name": "Robogo", "version": "1.0"}']
    result: post_response
  
  - name: "Log POST response status"
    action: log
    args: ["POST Response Status: ${post_response}"]
  
  # Test HTTP request with custom headers
  - name: "GET with custom headers"
    action: http
    args: ["GET", "https://httpbin.org/headers", {"User-Agent": "Robogo-Test/1.0", "Accept": "application/json"}]
    result: headers_response
  
  - name: "Log headers response"
    action: log
    args: ["Headers Response: ${headers_response}"]
  
  # Test HTTP PUT request
  - name: "PUT request to httpbin"
    action: http
    args: ["PUT", "https://httpbin.org/put", '{"updated": true}', {"Content-Type": "application/json"}]
    result: put_response
  
  - name: "Log PUT response"
    action: log
    args: ["PUT Response: ${put_response}"]
  
  # Test HTTP DELETE request
  - name: "DELETE request to httpbin"
    action: http
    args: ["DELETE", "https://httpbin.org/delete"]
    result: delete_response
  
  - name: "Log DELETE response"
    action: log
    args: ["DELETE Response: ${delete_response}"]
  
  # Test HTTP request with client certificate (file paths)
  - name: "GET with client certificate (file path)"
    action: http
    args: ["GET", "https://api.example.com/secure", "", "", {"cert": "/path/to/client.crt", "key": "/path/to/client.key"}]
    result: cert_response
    continue_on_failure: true
  
  - name: "Log certificate response"
    action: log
    args: ["Certificate Response: ${cert_response}"]
  
  # Test HTTP request with client certificate (PEM content)
  - name: "GET with client certificate (PEM)"
    action: http
    args: ["GET", "https://api.example.com/secure", "", "", {"cert": "-----BEGIN CERTIFICATE-----\nMII...\n-----END CERTIFICATE-----", "key": "-----BEGIN PRIVATE KEY-----\nMII...\n-----END PRIVATE KEY-----"}]
    result: pem_cert_response
    continue_on_failure: true
  
  - name: "Log PEM certificate response"
    action: log
    args: ["PEM Certificate Response: ${pem_cert_response}"]
  
  # Test HTTP request with custom CA certificate (file path)
  - name: "GET with custom CA (file path)"
    action: http
    args: ["GET", "https://internal.example.com/api", "", "", {"ca": "/path/to/custom-ca.crt"}]
    result: ca_response
    continue_on_failure: true
  
  - name: "Log custom CA response"
    action: log
    args: ["Custom CA Response: ${ca_response}"]
  
  # Test HTTP request with custom CA certificate (PEM content)
  - name: "GET with custom CA (PEM)"
    action: http
    args: ["GET", "https://internal.example.com/api", "", "", {"ca": "-----BEGIN CERTIFICATE-----\nMII...\n-----END CERTIFICATE-----"}]
    result: pem_ca_response
    continue_on_failure: true
  
  - name: "Log PEM CA response"
    action: log
    args: ["PEM CA Response: ${pem_ca_response}"]
  
  # Test HTTP request with both client cert and custom CA (mixed file paths and PEM)
  - name: "POST with client cert and custom CA (mixed)"
    action: http
    args: ["POST", "https://secure.example.com/data", '{"secure": true}', {"Content-Type": "application/json"}, {"cert": "/path/to/client.crt", "key": "-----BEGIN PRIVATE KEY-----\nMII...\n-----END PRIVATE KEY-----", "ca": "-----BEGIN CERTIFICATE-----\nMII...\n-----END CERTIFICATE-----"}]
    result: mixed_cert_response
    continue_on_failure: true
  
  - name: "Log mixed certificate response"
    action: log
    args: ["Mixed Certificate Response: ${mixed_cert_response}"]
  
  # Test error handling (404)
  - name: "GET 404 error"
    action: http_get
    args: ["https://httpbin.org/status/404"]
    result: error_response
  
  - name: "Log error response"
    action: log
    args: ["Error Response: ${error_response}"]
  
  # Assert response status codes
  - name: "Assert GET 200"
    action: assert
    args: ["${get_response.status_code}", "==", "200", "GET request should return 200"]
    continue_on_failure: true
  
  - name: "Assert POST 200"
    action: assert
    args: ["${post_response.status_code}", "==", "200", "POST request should return 200"]
    continue_on_failure: true
  
  - name: "Assert 404"
    action: assert
    args: ["${error_response.status_code}", "==", "404", "Error request should return 404"]
    continue_on_failure: true

# Available HTTP actions:
# - http: Generic HTTP request with method, url, body, headers, options
# - http_get: Convenience function for GET requests
# - http_post: Convenience function for POST requests
# 
# HTTP action signature:
# http(method, url, body, headers, options)
# 
# Options can include:
# - cert: Path to client certificate file (.crt, .pem) OR PEM content
# - key: Path to client private key file (.key, .pem) OR PEM content
# - ca: Path to custom CA certificate file (.crt, .pem) OR PEM content
# 
# Certificate input detection:
# - File paths: Contains "/", "\", or "." and doesn't start with "-----BEGIN"
# - PEM content: Contains "-----BEGIN" and "-----END" markers
# 
# Response format (JSON):
# {
#   "status_code": 200,
#   "headers": {"Content-Type": "application/json"},
#   "body": "response body",
#   "duration": "1.234ms"
# }
# 
# Note: Certificate paths and PEM content in this example are placeholders.
# Replace with actual certificate files or PEM content for your environment. 