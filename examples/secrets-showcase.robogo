testcase: "Robogo Secrets Management Showcase"
description: |
  🔐 Complete demonstration of Robogo's secret management capabilities:
  
  ✅ File-based secrets (production-ready)
  ✅ Inline secrets (development convenience)
  ✅ Masked vs unmasked secrets (security control)
  ✅ Secrets in HTTP authentication
  ✅ Debug output with proper masking
  ✅ Variable substitution with secrets

variables:
  vars:
    api_base_url: "https://jsonplaceholder.typicode.com"
    environment: "showcase"
    test_name: "Robogo Secrets Demo"

  secrets:
    # 🔒 File-based secrets (RECOMMENDED for production)
    api_key:
      file: "examples/secrets/api-key.txt"
      mask_output: true  # 🎭 Will show [MASKED] in logs
    
    jwt_token:
      file: "examples/secrets/jwt-token.txt"
      mask_output: true  # 🎭 Authentication tokens should be masked
    
    # 🔒 Inline secrets (convenient for development)
    client_secret:
      value: "oauth_client_secret_xyz789"
      mask_output: true  # 🎭 OAuth secrets should be masked
    
    session_id:
      value: "sess_1234567890abcdef"
      mask_output: true  # 🎭 Session IDs should be masked
    
    # 🔓 Unmasked secrets (for debugging/non-sensitive data)
    api_version:
      value: "v2.1.0"
      mask_output: false  # 📋 Version numbers aren't sensitive
    
    service_endpoint:
      value: "/api/secure/posts"
      mask_output: false  # 📋 Public endpoints aren't sensitive

steps:
  - name: "🚀 Initialize demo"
    action: log
    args: ["Starting ${test_name} in ${environment} environment"]

  - name: "🔍 Demonstrate variable debugging (run with --debug-vars)"
    action: log
    args: ["Debug mode shows: API=${api_key}, JWT=${jwt_token}, Version=${api_version}"]

  - name: "🌐 HTTP request with file-based API key (masked in logs)"
    action: http
    args: 
      - "GET"
      - "${api_base_url}/posts/1"
    options:
      headers:
        Authorization: "Bearer ${api_key}"
        X-API-Version: "${api_version}"
        X-Session-ID: "${session_id}"
    result: api_response

  - name: "✅ Verify API response"
    action: assert
    args: ["${api_response.status_code}", "==", "200"]

  - name: "🔑 HTTP request with JWT token (also masked)"
    action: http
    args:
      - "GET"
      - "${api_base_url}/users/1"
    options:
      headers:
        Authorization: "Bearer ${jwt_token}"
        X-Client-Secret: "${client_secret}"
        X-Service-Endpoint: "${service_endpoint}"
    result: user_response

  - name: "✅ Verify JWT request"
    action: assert
    args: ["${user_response.status_code}", "==", "200"]

  - name: "📝 Create secure URL with multiple secrets"
    action: variable
    args:
      - "set"
      - "secure_url"
      - "${api_base_url}${service_endpoint}?token=${jwt_token}&key=${api_key}&session=${session_id}"

  - name: "🔍 Log secure URL (secrets automatically masked)"
    action: log
    args: ["Constructed secure URL: ${secure_url}"]

  - name: "🔐 Test all secret types in conditional logic"
    action: if
    args: ["${api_version}", "==", "v2.1.0"]
    steps:
      - name: "✅ API version verified"
        action: log
        args: ["Using API version ${api_version} with endpoint ${service_endpoint}"]
      
      - name: "🔒 Log masked secrets"
        action: log
        args: ["Secrets used: API=${api_key}, JWT=${jwt_token}, Client=${client_secret}"]

  - name: "🔄 Test secrets in loop with multiple requests"
    action: for
    args: ["post_id", [1, 2, 3]]
    steps:
      - name: "🌐 Authenticated loop request"
        action: http
        args:
          - "GET"
          - "${api_base_url}/posts/${post_id}"
        options:
          headers:
            Authorization: "Bearer ${jwt_token}"
            X-API-Key: "${api_key}"
            X-Loop-ID: "${post_id}"
        result: "response_${post_id}"

      - name: "✅ Verify loop response"
        action: assert
        args: ["${response_${post_id}.status_code}", "==", "200"]

  - name: "📊 Final summary with all secret types"
    action: log
    args: ["✅ Demo complete! Used secrets: API=${api_key}, JWT=${jwt_token}, Client=${client_secret}, Session=${session_id}"]

  - name: "🎯 Security demonstration complete"
    action: log
    args: ["🔐 All secrets properly masked in output. Unmasked values: Version=${api_version}, Endpoint=${service_endpoint}"]