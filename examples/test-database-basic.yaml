testcase: "TC-DATABASE-BASIC"
description: "Basic database operations test"

variables:
  vars:
    # PostgreSQL connection string for local development
    db_url: "postgres://robogo_testuser:robogo_testpass@localhost:5432/robogo_testdb?sslmode=disable"
    test_name: "John Doe"
    test_email: "john@example.com"

steps:
  # Create test table
  - name: "Create users table"
    action: postgres
    args: ["execute", "${db_url}", "CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, name VARCHAR(100), email VARCHAR(100))"]

  # Insert test data
  - name: "Insert test user"
    action: postgres
    args: ["execute", "${db_url}", "INSERT INTO users (name, email) VALUES ('${test_name}', '${test_email}')"]
    result: "insert_result"

  # Verify insert worked
  - name: "Check rows affected"
    action: assert
    args: ["${insert_result.rows_affected}", "==", "1", "Should insert exactly 1 row"]

  # Query the data back
  - name: "Query inserted user"
    action: postgres
    args: ["query", "${db_url}", "SELECT name, email FROM users WHERE email = '${test_email}' LIMIT 1"]
    result: "query_result"

  # Verify query results
  - name: "Check we got data back"
    action: assert
    args: ["${query_result.columns}", "!=", "", "Should have column names"]

  - name: "Verify name matches"
    action: log
    args: ["Found user:", "${query_result.rows}"]

  # Count total users
  - name: "Count all users"
    action: postgres
    args: ["query", "${db_url}", "SELECT COUNT(*) as user_count FROM users"]
    result: "count_result"

  - name: "Log user count"
    action: log
    args: ["Total users in database:", "${count_result.rows}"]

  # Cleanup
  - name: "Delete test user"
    action: postgres
    args: ["execute", "${db_url}", "DELETE FROM users WHERE email = '${test_email}'"]
    result: "delete_result"

  - name: "Verify deletion"
    action: assert
    args: ["${delete_result.rows_affected}", "==", "1", "Should delete exactly 1 row"]

  - name: "Log test completion"
    action: log
    args: ["Database test completed successfully"]