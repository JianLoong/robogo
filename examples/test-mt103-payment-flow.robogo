testcase: "TC01-MT103 Payment Flow Simulation"
description: "Test SWIFT MT103 payment message generation and submission to mock payment system"

variables:
  secrets:
    spanner_project:
      value: "test-project"
    spanner_instance:
      value: "test-instance"
    spanner_database:
      value: "test-database"
  vars:
    # Mock sender details
    sender_bic: "DEUTDEFF"
    sender_account: "DE89370400440532013000"
    sender_name: "Deutsche Bank AG"
    
    # Mock beneficiary details  
    beneficiary_account: "GB29NWBK60161331926819"
    beneficiary_name: "Barclays Bank PLC"
    
    # Payment details
    currency: "EUR"
    amount: 1000.00
    reference: "INV-2024-001"
    
    # Mock API endpoint
    payment_api_url: "https://httpbin.org/post"
    # Spanner connection string (update as needed)
    spanner_project_id: "${spanner_project}"
    spanner_instance_id: "${spanner_instance}"
    spanner_database_id: "${spanner_database}"
    test_table: "integration_test"
    spanner_connection: "projects/${spanner_project_id}/instances/${spanner_instance_id}/databases/${spanner_database_id}"

steps:

    # Basic HTTP Response Logging
  - name: "Basic GET request and logging"
    action: http_get
    args: ["${api_base_url}/get"]
    result: basic_response

  - name: "S1 - Generate transaction timestamp"
    action: get_time
    args: ["unix_ms"]
    result: timestamp_ms

  - name: "S2 - Create unique transaction ID"
    action: concat
    args: ["TXN", "${timestamp_ms}"]
    result: transaction_id

  - name: "S3 -Get current date"
    action: get_time
    args: ["date"]
    result: current_date

  - name: "S4 - Generate MT103 SWIFT Message"
    action: template
    args:
      - "templates/mt103.tmpl"
      -
        Sender:
          BIC: "${sender_bic}"
          Account: "${sender_account}"
          Name: "${sender_name}"
        Beneficiary:
          Account: "${beneficiary_account}"
          Name: "${beneficiary_name}"
        TransactionID: "${transaction_id}"
        Timestamp: "${timestamp_ms}"
        Date: "${current_date}"
        Currency: "${currency}"
        Amount: "${amount}"
        Reference: "${reference}"
    result: mt103_message

  - name: "S5 - Log Generated MT103 Message"
    action: log
    args: ["Generated MT103 Message:", "${mt103_message}"]

  - name: "S6 - Submit MT103 to Mock Payment API"
    action: http
    args:
      - "POST"
      - "${payment_api_url}"
      -
        Content-Type: "application/xml"
        X-API-Key: "mock-api-key-12345"
        X-Transaction-ID: "${transaction_id}"
      - "${mt103_message}"
    result: payment_response

  - name: "S7 - Log Payment API Response"
    action: log
    args: ["Payment API Respons.data:", "${payment_response}"]

  - name: "S8 - Assert Payment API Response Status"
    action: assert
    args: ["${payment_response.status_code}", "==", "200", "Payment API should return 200 OK"]

  - name: "S9 - Assert Payment API Response Contains Success"
    action: assert
    args: ["${payment_response.body}", "contains", "${transaction_id}", "Payment API response should indicate message was accepted"]

  - name: "Insert Payment Record into Spanner"
    action: spanner
    args:
      - execute
      - "${spanner_connection}"
      - "INSERT INTO payments (transaction_id, sender_bic, sender_account, beneficiary_account, amount) VALUES ('${transaction_id}', '${sender_bic}', '${sender_account}', '${beneficiary_account}', ${amount})"
    result: spanner_insert_result

  - name: "Query Payment Record from Spanner"
    action: spanner
    args:
      - query
      - "${spanner_connection}"
      - "SELECT * FROM payments WHERE transaction_id = '${transaction_id}'"
    result: spanner_query_result

  - name: "Assert Spanner Query Result"
    action: assert
    args:
      - "${spanner_query_result}"
      - contains
      - "${transaction_id}"

  - name: "Log Payment Flow Completion"
    action: log
    args: ["MT103 Payment Flow completed successfully"] 