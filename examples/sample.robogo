# Sample Robogo Test Case
# This file demonstrates the basic features of the Robogo framework

testcase: "Sample Test Case"
description: "A comprehensive sample test case demonstrating Robogo features including new decimal ranges and continue_on_failure"

steps:
  # Basic logging
  - name: "Start test case"
    action: log
    args: ["Starting sample test case"]
  
  # Get current timestamp and store in variable
  - name: "Get start time"
    action: get_time
    args: ["iso"]
    result: start_time
  
  # Log the timestamp using variable substitution
  - name: "Log start time"
    action: log
    args: ["Test started at: ${start_time}"]
  
  # Sleep for a short duration
  - name: "Wait 0.5 seconds"
    action: sleep
    args: [0.5]
  
  # Basic assertion
  - name: "Basic assertion"
    action: assert
    args: [true, "==", true, "Basic assertion test"]
  
  # String operations with variables
  - name: "Create greeting"
    action: concat
    args: ["Hello", " ", "from", " ", "Robogo"]
    result: greeting
  
  - name: "Log greeting"
    action: log
    args: ["Greeting: ${greeting}"]
  
  # Get length of the greeting
  - name: "Get greeting length"
    action: length
    args: ["${greeting}"]
    result: greeting_length
  
  - name: "Log greeting length"
    action: log
    args: ["Greeting length: ${greeting_length}"]
  
  # Assert using variables
  - name: "Assert greeting length"
    action: assert
    args: ["${greeting_length}", "==", "17", "Greeting should be 17 characters"]
  
  # Get a random number (backward compatibility)
  - name: "Get random number (0-100)"
    action: get_random
    args: [100]
    result: random_value
  
  - name: "Log random number"
    action: log
    args: ["Random number (0-100): ${random_value}"]
  
  # NEW: Get random number in range
  - name: "Get random number in range"
    action: get_random
    args: [10, 50]
    result: random_range
  
  - name: "Log random range number"
    action: log
    args: ["Random number (10-50): ${random_range}"]
  
  # NEW: Get random decimal
  - name: "Get random decimal"
    action: get_random
    args: [0.1, 1.0]
    result: random_decimal
  
  - name: "Log random decimal"
    action: log
    args: ["Random decimal (0.1-1.0): ${random_decimal}"]
  
  # NEW: Test continue_on_failure
  - name: "Test continue_on_failure"
    for:
      condition: "1..3"
      steps:
        - name: "Generate test value"
          action: get_random
          args: [1, 10]
          result: test_value
        
        - name: "Log test value"
          action: log
          args: ["Test value ${iteration}: ${test_value}"]
        
        - name: "Fail on even numbers (continue)"
          action: assert
          args: ["${test_value}", "%", "2", "!=", "0", "Should not be even"]
          continue_on_failure: true
        
        - name: "Fail on value 5 (continue)"
          action: assert
          args: ["${test_value}", "!=", "5", "Should not be 5"]
          continue_on_failure: true

  # Different time formats
  - name: "Get current date"
    action: get_time
    args: ["date"]
    result: current_date
  
  - name: "Get current time"
    action: get_time
    args: ["time"]
    result: current_time
  
  - name: "Log current date and time"
    action: log
    args: ["Current date: ${current_date}, time: ${current_time}"]
  
  # NEW: Test edge cases with same min/max values
  - name: "Test same min/max values"
    action: get_random
    args: [42, 42]
    result: same_value
  
  - name: "Validate same value"
    action: assert
    args: ["${same_value}", "==", "42", "Should be exactly 42"]
  
  # NEW: Test decimal edge case
  - name: "Test decimal same values"
    action: get_random
    args: [3.14, 3.14]
    result: same_decimal
  
  - name: "Validate same decimal"
    action: assert
    args: ["${same_decimal}", "==", "3.14", "Should be exactly 3.14"]
  
  # Final log with multiple variables
  - name: "Log completion"
    action: log
    args: ["Sample test completed successfully at ${current_time} on ${current_date}"]

# This file demonstrates:
# - Basic actions: log, sleep, assert
# - Variable assignment with 'result'
# - Variable substitution with ${variable}
# - String operations: concat, length
# - Time operations with different formats
# - Random number generation (backward compatibility: 0 to max)
# - NEW: Random number generation with ranges (min to max)
# - NEW: Random decimal generation with ranges
# - NEW: continue_on_failure for error handling
# - NEW: Edge case handling with same min/max values
# - Complex assertions using variables
# - Loop testing with proper iteration context 