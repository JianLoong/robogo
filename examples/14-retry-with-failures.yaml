testcase: "TC-14-RETRY-WITH-FAILURES"
description: "Demonstrate retry with actual failures and recovery"

variables:
  vars:
    counter: 0

steps:
  # Test 1: HTTP retry with non-existent endpoint (demonstrates actual network failures)
  - name: "Test HTTP retry with non-existent endpoint"
    action: http
    args: ["GET", "https://this-domain-does-not-exist-12345.com/test"]
    retry:
      attempts: 3
      delay: "1s"
      retry_on: ["http_error", "connection_error", "all"]
    result: http_failure_result
    continue: true
    
  # Test 2: Follow up with successful request to show recovery
  - name: "Test successful HTTP request after failure"
    action: http
    args: ["GET", "https://httpbin.org/get"]
    result: http_success_result

  # Test 3: Show that even with failures, we can continue
  - name: "Log continuation after retry failure"
    action: log
    args: ["Test continued after retry failure - this is expected behavior"]

  # Test 4: Variable assertion that succeeds immediately (no retries needed)
  - name: "Set correct value for next test"
    action: variable
    args: ["success_value", "expected"]

  - name: "Assert that succeeds on first try"
    action: assert
    args: ["${success_value}", "==", "expected", "This should succeed immediately"]
    retry:
      attempts: 5
      delay: "500ms"
      retry_on: ["assertion_failed"]
    result: immediate_success

  # Test 5: HTTP retry with a delayed endpoint
  - name: "Test HTTP with delay (simulates processing time)"
    action: http
    args: ["GET", "https://httpbin.org/delay/1"]
    retry:
      attempts: 3
      delay: "2s"
      backoff: "linear"
    result: delayed_response

  # Test 6: Log completion
  - name: "Final test summary"
    action: log
    args: ["Retry with failures demo completed - failures are expected and normal"]